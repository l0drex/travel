---
import type {
  GetStaticPaths,
  InferGetStaticParamsType,
  InferGetStaticPropsType,
} from "astro";
import {
  getCollection,
  getEntry,
  render,
  type CollectionEntry,
} from "astro:content";
import Layout from "@layouts/BaseLayout.astro";
import TrackView from "@components/track/TrackView.vue";
import authors from "src/authors.json";
import { journeyTypes } from "../utils/types";
import JourneyType from "../components/TypeIcon.astro";
import { dateFormatter } from "../utils/general";
import { getImage } from "astro:assets";
import JourneyContent from "@components/MarkdownContent.astro";
import Button from "@components/Button.astro";
import { Icon } from "astro-icon/components";
import TitleNav from "@components/TitlesNav.astro";
import twconfig from "tailwind.config.mjs";

export const getStaticPaths = (async () => {
  const posts: CollectionEntry<"posts">[] = await getCollection("posts");

  return posts.map((entry) => ({
    params: { journey: entry.id.replace(/.md$/, "") },
    props: { entry },
  }));
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { entry } = Astro.props;
const { Content, headings } = await render(entry);

const geoJson = await getEntry(entry.data.gpx);
const author = authors[entry.data.author];
const journeyType = journeyTypes[entry.data.type];

const jsDate: Date = entry.data.date;
const machineDate = jsDate.toISOString();
const humanDate = dateFormatter(jsDate, Astro.currentLocale);

const ogImage = await getImage({
  src: entry.data.image,
  width: 1200,
  height: 630,
  format: "webp",
});
---

<Layout
  title={entry.data.title}
  light={twconfig.theme.extend.colors.bg["2"].DEFAULT}
  dark={twconfig.theme.extend.colors.bg["2"].dark}
>
  <Fragment slot="meta">
    <meta property="og:type" content="article" />
    <meta property="article:section" content="travel" />
    <meta property="article:section" content={entry.data.type} />
    <meta property="article:tag" content="travel" />
    <meta property="article:tag" content={entry.data.type} />

    <meta name="date" content={machineDate} />
    <meta property="article:published_time" content={machineDate} />

    <meta name="author" content={author.name} />
    <meta name="fediverse:creator" content={author.fediverse} />
    <meta property="article:author" content={author.name} />

    <meta name="description" content={entry.data.description} />
    <meta property="og:description" content={entry.data.description} />

    <meta property="og:image" content={ogImage.src} />
    <meta property="og:image:width" content={`${ogImage.options.width}`} />
    <meta property="og:image:height" content={`${ogImage.options.height}`} />
    <meta property="og:image:format" content={ogImage.options.format} />
    <meta property="og:image:alt" content={entry.data.alt} />
  </Fragment>

  <section class="w-fill m-auto bg-bg-2 pt-10 pb-4 dark:bg-bg-2-dark">
    <h1
      class="mt-8 mb-4 text-center font-serif text-4xl font-bold sm:text-5xl md:mt-0"
    >
      {entry.data.title}
    </h1>
    <div
      class="mb-8 flex justify-center gap-2 text-center align-baseline text-2xl"
    >
      {(<JourneyType type={journeyType} />)}
      <span>·</span>
      <time datetime={jsDate.toISOString()}>{humanDate}</time>
    </div>

    <div class="mx-auto max-w-5xl">
      <TrackView
        client:only="vue"
        geoJson={geoJson.data}
        journeyType={journeyType}
      />
    </div>
  </section>

  <JourneyContent>
    <Content />
  </JourneyContent>

  <nav
    slot="aside"
    class="sticky top-0 hidden h-screen w-max flex-col items-center justify-between overflow-y-auto px-5 py-10 md:flex dark:bg-bg-2-dark"
  >
    <Button href={import.meta.env.BASE_URL}>
      <Icon name="mdi:chevron-left" slot="icon" />
      Zurück zur Übersicht
    </Button>

    <TitleNav headings={headings} />

    <Button href={Astro.url}>
      <Icon name="mdi:chevron-up" slot="icon" />
      Zurück nach oben
    </Button>
  </nav>
</Layout>
