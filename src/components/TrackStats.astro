---
import { Icon } from "astro-icon/components";
import {
  type JourneyType,
  JourneyTypeIds,
  journeyTypes,
  type Stat,
  statsPrototypes,
} from "../utils/types";
import { formatHours } from "../utils/general";

type Keys = keyof typeof statsPrototypes;

interface Props {
  stats: {
    [K in Keys]?: number;
  } & {
    days: number;
  };
  journeyType: JourneyType;
}

const { stats: values, journeyType } = Astro.props;

const stats: Stat[] = [];
for (const valueKey in values) {
  const stat = structuredClone<Stat>(statsPrototypes[valueKey]);
  let value: string;

  switch (valueKey) {
    case "totalDistance":
    case "elevationUp":
    case "elevationDown":
      value = values[valueKey]!.toFixed(0);
      break;
    case "totalTime":
      value = formatHours(values[valueKey]!);
      break;
    default:
      value = String(values[valueKey]);
  }

  stat.value = stat.value.replace("{}", value);
  stats.push(stat);
}

if ([JourneyTypeIds.hiking, JourneyTypeIds.bike].includes(journeyType.id)) {
  // calculate kilometers per day
  if ("days" in values) {
    if ("totalDistance" in values) {
      const kmpDStat = structuredClone(statsPrototypes["kmPerDay"]);
      const kmpD = (values.totalDistance! / values.days).toFixed(1);
      kmpDStat.value = kmpDStat.value.replace("{}", kmpD);
      stats.push(kmpDStat);
    }

    if ("totalTime" in values) {
      const timePDayStat = structuredClone(statsPrototypes["timePerDay"]);
      const timePDay: string = formatHours(values.totalTime! / values.days!);
      timePDayStat.value = timePDayStat.value.replace("{}", timePDay);
      stats.push(timePDayStat);
    }
  }

  // calculate average speed
  if ("totalDistance" in values && "totalTime" in values) {
    const avSpeedStat = structuredClone(statsPrototypes["averageSpeed"]);
    const avSpeed = values["totalDistance"]! / values["totalTime"]!;
    avSpeedStat.value = avSpeedStat.value.replace("{}", avSpeed.toFixed(1));
    stats.push(avSpeedStat);
  }
}

const statsNames = Object.values(statsPrototypes).map((s) => s.name);
stats.sort((a, b) => statsNames.indexOf(a.name) - statsNames.indexOf(b.name));
---

<div
  class="mt-4 box-border flex w-full max-w-max justify-start gap-4 overflow-x-auto px-2 pb-4 text-fg-inactive dark:text-fg-inactive-dark"
>
  {
    stats.map((stat) => (
      <div class="flex w-40 shrink-0 grow-0 flex-col items-center gap-1 rounded-lg border border-2 border-line p-2 dark:border-line-dark">
        <Icon name={stat.icon} size={40} />
        <span class="text-center text-xs font-bold">{`${stat.name}:`}</span>
        <span>{stat.value}</span>
      </div>
    ))
  }
</div>
