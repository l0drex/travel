---
import { Icon } from "astro-icon/components";
import {
  JourneyTypeId,
  type Stat,
  StatId,
  statsPrototypes,
} from "../utils/types";
import { formatHours } from "../utils/general";

interface Props {
  stats: Partial<Record<StatId, number>>;
}

const { stats: values } = Astro.props;

const stats: Stat[] = [];
for (const [valueKey, v] of Object.entries(values) as [StatId, number][]) {
  const stat = structuredClone<Stat>(statsPrototypes[valueKey]);
  let value: string;

  switch (valueKey) {
    case StatId.elevationUp:
    case StatId.elevationDown:
      value = v.toFixed(0);
      break;
    case StatId.totalDistance:
    case StatId.kmPerDay:
    case StatId.averageSpeed:
      value = v.toFixed(1);
      break;
    case StatId.totalTime:
    case StatId.timePerDay:
      value = formatHours(v);
      break;
    default:
      value = String(v);
  }

  stat.value = stat.value.replace("{}", value);
  stats.push(stat);
}

const statsNames = Object.values(statsPrototypes).map((s) => s.name);
stats.sort((a, b) => statsNames.indexOf(a.name) - statsNames.indexOf(b.name));
---

<div
  class="mt-4 box-border flex w-full max-w-max justify-start gap-4 overflow-x-auto px-2 pb-4 text-fg-inactive dark:text-fg-inactive-dark"
>
  {
    stats.map((stat) => (
      <div class="flex w-40 shrink-0 grow-0 flex-col items-center gap-1 rounded-lg border border-2 border-line p-2 dark:border-line-dark">
        <Icon name={stat.icon} size={40} />
        <span class="text-center text-xs font-bold">{`${stat.name}:`}</span>
        <span>{stat.value}</span>
      </div>
    ))
  }
</div>
